/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-02-14 18:40:25 UTC)
 * on 2014-03-22 at 17:55:53 UTC 
 * Modify at your own risk.
 */

package com.w3m.api.ridemyspot.entity.rmsendpoint;

/**
 * Service definition for Rmsendpoint (v1).
 *
 * <p>
 * API of RideMySpot including spots and comments
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link RmsendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Rmsendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the rmsendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://ridemyspotapi.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "rmsendpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Rmsendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Rmsendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "getComments".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link GetComments#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetComments getComments(java.lang.Long id) throws java.io.IOException {
    GetComments result = new GetComments(id);
    initialize(result);
    return result;
  }

  public class GetComments extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments> {

    private static final String REST_PATH = "comments/{id}";

    /**
     * Create a request for the method "getComments".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link GetComments#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetComments#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetComments(java.lang.Long id) {
      super(Rmsendpoint.this, "GET", REST_PATH, null, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetComments setAlt(java.lang.String alt) {
      return (GetComments) super.setAlt(alt);
    }

    @Override
    public GetComments setFields(java.lang.String fields) {
      return (GetComments) super.setFields(fields);
    }

    @Override
    public GetComments setKey(java.lang.String key) {
      return (GetComments) super.setKey(key);
    }

    @Override
    public GetComments setOauthToken(java.lang.String oauthToken) {
      return (GetComments) super.setOauthToken(oauthToken);
    }

    @Override
    public GetComments setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetComments) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetComments setQuotaUser(java.lang.String quotaUser) {
      return (GetComments) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetComments setUserIp(java.lang.String userIp) {
      return (GetComments) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetComments setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetComments set(String parameterName, Object value) {
      return (GetComments) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getSpots".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link GetSpots#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetSpots getSpots(java.lang.Long id) throws java.io.IOException {
    GetSpots result = new GetSpots(id);
    initialize(result);
    return result;
  }

  public class GetSpots extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots> {

    private static final String REST_PATH = "spots/{id}";

    /**
     * Create a request for the method "getSpots".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link GetSpots#execute()} method to invoke the remote operation.
     * <p> {@link
     * GetSpots#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetSpots(java.lang.Long id) {
      super(Rmsendpoint.this, "GET", REST_PATH, null, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetSpots setAlt(java.lang.String alt) {
      return (GetSpots) super.setAlt(alt);
    }

    @Override
    public GetSpots setFields(java.lang.String fields) {
      return (GetSpots) super.setFields(fields);
    }

    @Override
    public GetSpots setKey(java.lang.String key) {
      return (GetSpots) super.setKey(key);
    }

    @Override
    public GetSpots setOauthToken(java.lang.String oauthToken) {
      return (GetSpots) super.setOauthToken(oauthToken);
    }

    @Override
    public GetSpots setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetSpots) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetSpots setQuotaUser(java.lang.String quotaUser) {
      return (GetSpots) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetSpots setUserIp(java.lang.String userIp) {
      return (GetSpots) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetSpots setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetSpots set(String parameterName, Object value) {
      return (GetSpots) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUsers".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link GetUsers#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetUsers getUsers(java.lang.Long id) throws java.io.IOException {
    GetUsers result = new GetUsers(id);
    initialize(result);
    return result;
  }

  public class GetUsers extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users> {

    private static final String REST_PATH = "users/{id}";

    /**
     * Create a request for the method "getUsers".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link GetUsers#execute()} method to invoke the remote operation.
     * <p> {@link
     * GetUsers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetUsers(java.lang.Long id) {
      super(Rmsendpoint.this, "GET", REST_PATH, null, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUsers setAlt(java.lang.String alt) {
      return (GetUsers) super.setAlt(alt);
    }

    @Override
    public GetUsers setFields(java.lang.String fields) {
      return (GetUsers) super.setFields(fields);
    }

    @Override
    public GetUsers setKey(java.lang.String key) {
      return (GetUsers) super.setKey(key);
    }

    @Override
    public GetUsers setOauthToken(java.lang.String oauthToken) {
      return (GetUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUsers setQuotaUser(java.lang.String quotaUser) {
      return (GetUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUsers setUserIp(java.lang.String userIp) {
      return (GetUsers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetUsers setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetUsers set(String parameterName, Object value) {
      return (GetUsers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertComments".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link InsertComments#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments}
   * @return the request
   */
  public InsertComments insertComments(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments content) throws java.io.IOException {
    InsertComments result = new InsertComments(content);
    initialize(result);
    return result;
  }

  public class InsertComments extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments> {

    private static final String REST_PATH = "comments";

    /**
     * Create a request for the method "insertComments".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link InsertComments#execute()} method to invoke the remote
     * operation. <p> {@link InsertComments#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments}
     * @since 1.13
     */
    protected InsertComments(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments content) {
      super(Rmsendpoint.this, "POST", REST_PATH, content, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments.class);
    }

    @Override
    public InsertComments setAlt(java.lang.String alt) {
      return (InsertComments) super.setAlt(alt);
    }

    @Override
    public InsertComments setFields(java.lang.String fields) {
      return (InsertComments) super.setFields(fields);
    }

    @Override
    public InsertComments setKey(java.lang.String key) {
      return (InsertComments) super.setKey(key);
    }

    @Override
    public InsertComments setOauthToken(java.lang.String oauthToken) {
      return (InsertComments) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertComments setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertComments) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertComments setQuotaUser(java.lang.String quotaUser) {
      return (InsertComments) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertComments setUserIp(java.lang.String userIp) {
      return (InsertComments) super.setUserIp(userIp);
    }

    @Override
    public InsertComments set(String parameterName, Object value) {
      return (InsertComments) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertSpots".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link InsertSpots#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots}
   * @return the request
   */
  public InsertSpots insertSpots(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots content) throws java.io.IOException {
    InsertSpots result = new InsertSpots(content);
    initialize(result);
    return result;
  }

  public class InsertSpots extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots> {

    private static final String REST_PATH = "spots";

    /**
     * Create a request for the method "insertSpots".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link InsertSpots#execute()} method to invoke the remote
     * operation. <p> {@link
     * InsertSpots#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots}
     * @since 1.13
     */
    protected InsertSpots(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots content) {
      super(Rmsendpoint.this, "POST", REST_PATH, content, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots.class);
    }

    @Override
    public InsertSpots setAlt(java.lang.String alt) {
      return (InsertSpots) super.setAlt(alt);
    }

    @Override
    public InsertSpots setFields(java.lang.String fields) {
      return (InsertSpots) super.setFields(fields);
    }

    @Override
    public InsertSpots setKey(java.lang.String key) {
      return (InsertSpots) super.setKey(key);
    }

    @Override
    public InsertSpots setOauthToken(java.lang.String oauthToken) {
      return (InsertSpots) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertSpots setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertSpots) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertSpots setQuotaUser(java.lang.String quotaUser) {
      return (InsertSpots) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertSpots setUserIp(java.lang.String userIp) {
      return (InsertSpots) super.setUserIp(userIp);
    }

    @Override
    public InsertSpots set(String parameterName, Object value) {
      return (InsertSpots) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUsers".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link InsertUsers#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users}
   * @return the request
   */
  public InsertUsers insertUsers(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users content) throws java.io.IOException {
    InsertUsers result = new InsertUsers(content);
    initialize(result);
    return result;
  }

  public class InsertUsers extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users> {

    private static final String REST_PATH = "users";

    /**
     * Create a request for the method "insertUsers".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link InsertUsers#execute()} method to invoke the remote
     * operation. <p> {@link
     * InsertUsers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users}
     * @since 1.13
     */
    protected InsertUsers(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users content) {
      super(Rmsendpoint.this, "POST", REST_PATH, content, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users.class);
    }

    @Override
    public InsertUsers setAlt(java.lang.String alt) {
      return (InsertUsers) super.setAlt(alt);
    }

    @Override
    public InsertUsers setFields(java.lang.String fields) {
      return (InsertUsers) super.setFields(fields);
    }

    @Override
    public InsertUsers setKey(java.lang.String key) {
      return (InsertUsers) super.setKey(key);
    }

    @Override
    public InsertUsers setOauthToken(java.lang.String oauthToken) {
      return (InsertUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUsers setQuotaUser(java.lang.String quotaUser) {
      return (InsertUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUsers setUserIp(java.lang.String userIp) {
      return (InsertUsers) super.setUserIp(userIp);
    }

    @Override
    public InsertUsers set(String parameterName, Object value) {
      return (InsertUsers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listComments".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link ListComments#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListComments listComments() throws java.io.IOException {
    ListComments result = new ListComments();
    initialize(result);
    return result;
  }

  public class ListComments extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.CollectionResponseComments> {

    private static final String REST_PATH = "comments";

    /**
     * Create a request for the method "listComments".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link ListComments#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListComments#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListComments() {
      super(Rmsendpoint.this, "GET", REST_PATH, null, com.w3m.api.ridemyspot.entity.rmsendpoint.model.CollectionResponseComments.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListComments setAlt(java.lang.String alt) {
      return (ListComments) super.setAlt(alt);
    }

    @Override
    public ListComments setFields(java.lang.String fields) {
      return (ListComments) super.setFields(fields);
    }

    @Override
    public ListComments setKey(java.lang.String key) {
      return (ListComments) super.setKey(key);
    }

    @Override
    public ListComments setOauthToken(java.lang.String oauthToken) {
      return (ListComments) super.setOauthToken(oauthToken);
    }

    @Override
    public ListComments setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListComments) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListComments setQuotaUser(java.lang.String quotaUser) {
      return (ListComments) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListComments setUserIp(java.lang.String userIp) {
      return (ListComments) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListComments setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long pidSpot;

    /**

     */
    public java.lang.Long getPidSpot() {
      return pidSpot;
    }

    public ListComments setPidSpot(java.lang.Long pidSpot) {
      this.pidSpot = pidSpot;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListComments setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListComments set(String parameterName, Object value) {
      return (ListComments) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listSpots".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link ListSpots#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListSpots listSpots() throws java.io.IOException {
    ListSpots result = new ListSpots();
    initialize(result);
    return result;
  }

  public class ListSpots extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.CollectionResponseSpots> {

    private static final String REST_PATH = "spots";

    /**
     * Create a request for the method "listSpots".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link ListSpots#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListSpots#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListSpots() {
      super(Rmsendpoint.this, "GET", REST_PATH, null, com.w3m.api.ridemyspot.entity.rmsendpoint.model.CollectionResponseSpots.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListSpots setAlt(java.lang.String alt) {
      return (ListSpots) super.setAlt(alt);
    }

    @Override
    public ListSpots setFields(java.lang.String fields) {
      return (ListSpots) super.setFields(fields);
    }

    @Override
    public ListSpots setKey(java.lang.String key) {
      return (ListSpots) super.setKey(key);
    }

    @Override
    public ListSpots setOauthToken(java.lang.String oauthToken) {
      return (ListSpots) super.setOauthToken(oauthToken);
    }

    @Override
    public ListSpots setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListSpots) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListSpots setQuotaUser(java.lang.String quotaUser) {
      return (ListSpots) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListSpots setUserIp(java.lang.String userIp) {
      return (ListSpots) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListSpots setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListSpots setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListSpots set(String parameterName, Object value) {
      return (ListSpots) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listUsers".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link ListUsers#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListUsers listUsers() throws java.io.IOException {
    ListUsers result = new ListUsers();
    initialize(result);
    return result;
  }

  public class ListUsers extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.CollectionResponseUsers> {

    private static final String REST_PATH = "users";

    /**
     * Create a request for the method "listUsers".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link ListUsers#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListUsers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListUsers() {
      super(Rmsendpoint.this, "GET", REST_PATH, null, com.w3m.api.ridemyspot.entity.rmsendpoint.model.CollectionResponseUsers.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListUsers setAlt(java.lang.String alt) {
      return (ListUsers) super.setAlt(alt);
    }

    @Override
    public ListUsers setFields(java.lang.String fields) {
      return (ListUsers) super.setFields(fields);
    }

    @Override
    public ListUsers setKey(java.lang.String key) {
      return (ListUsers) super.setKey(key);
    }

    @Override
    public ListUsers setOauthToken(java.lang.String oauthToken) {
      return (ListUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public ListUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListUsers setQuotaUser(java.lang.String quotaUser) {
      return (ListUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListUsers setUserIp(java.lang.String userIp) {
      return (ListUsers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListUsers setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListUsers setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListUsers set(String parameterName, Object value) {
      return (ListUsers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeComments".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link RemoveComments#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveComments removeComments(java.lang.Long id) throws java.io.IOException {
    RemoveComments result = new RemoveComments(id);
    initialize(result);
    return result;
  }

  public class RemoveComments extends RmsendpointRequest<Void> {

    private static final String REST_PATH = "comments/{id}";

    /**
     * Create a request for the method "removeComments".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link RemoveComments#execute()} method to invoke the remote
     * operation. <p> {@link RemoveComments#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveComments(java.lang.Long id) {
      super(Rmsendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveComments setAlt(java.lang.String alt) {
      return (RemoveComments) super.setAlt(alt);
    }

    @Override
    public RemoveComments setFields(java.lang.String fields) {
      return (RemoveComments) super.setFields(fields);
    }

    @Override
    public RemoveComments setKey(java.lang.String key) {
      return (RemoveComments) super.setKey(key);
    }

    @Override
    public RemoveComments setOauthToken(java.lang.String oauthToken) {
      return (RemoveComments) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveComments setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveComments) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveComments setQuotaUser(java.lang.String quotaUser) {
      return (RemoveComments) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveComments setUserIp(java.lang.String userIp) {
      return (RemoveComments) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveComments setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveComments set(String parameterName, Object value) {
      return (RemoveComments) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeSpots".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link RemoveSpots#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveSpots removeSpots(java.lang.Long id) throws java.io.IOException {
    RemoveSpots result = new RemoveSpots(id);
    initialize(result);
    return result;
  }

  public class RemoveSpots extends RmsendpointRequest<Void> {

    private static final String REST_PATH = "spots/{id}";

    /**
     * Create a request for the method "removeSpots".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link RemoveSpots#execute()} method to invoke the remote
     * operation. <p> {@link
     * RemoveSpots#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveSpots(java.lang.Long id) {
      super(Rmsendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveSpots setAlt(java.lang.String alt) {
      return (RemoveSpots) super.setAlt(alt);
    }

    @Override
    public RemoveSpots setFields(java.lang.String fields) {
      return (RemoveSpots) super.setFields(fields);
    }

    @Override
    public RemoveSpots setKey(java.lang.String key) {
      return (RemoveSpots) super.setKey(key);
    }

    @Override
    public RemoveSpots setOauthToken(java.lang.String oauthToken) {
      return (RemoveSpots) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveSpots setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveSpots) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveSpots setQuotaUser(java.lang.String quotaUser) {
      return (RemoveSpots) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveSpots setUserIp(java.lang.String userIp) {
      return (RemoveSpots) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveSpots setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveSpots set(String parameterName, Object value) {
      return (RemoveSpots) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeUsers".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link RemoveUsers#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveUsers removeUsers(java.lang.Long id) throws java.io.IOException {
    RemoveUsers result = new RemoveUsers(id);
    initialize(result);
    return result;
  }

  public class RemoveUsers extends RmsendpointRequest<Void> {

    private static final String REST_PATH = "users/{id}";

    /**
     * Create a request for the method "removeUsers".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link RemoveUsers#execute()} method to invoke the remote
     * operation. <p> {@link
     * RemoveUsers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveUsers(java.lang.Long id) {
      super(Rmsendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveUsers setAlt(java.lang.String alt) {
      return (RemoveUsers) super.setAlt(alt);
    }

    @Override
    public RemoveUsers setFields(java.lang.String fields) {
      return (RemoveUsers) super.setFields(fields);
    }

    @Override
    public RemoveUsers setKey(java.lang.String key) {
      return (RemoveUsers) super.setKey(key);
    }

    @Override
    public RemoveUsers setOauthToken(java.lang.String oauthToken) {
      return (RemoveUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveUsers setQuotaUser(java.lang.String quotaUser) {
      return (RemoveUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveUsers setUserIp(java.lang.String userIp) {
      return (RemoveUsers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveUsers setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveUsers set(String parameterName, Object value) {
      return (RemoveUsers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateComments".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link UpdateComments#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments}
   * @return the request
   */
  public UpdateComments updateComments(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments content) throws java.io.IOException {
    UpdateComments result = new UpdateComments(content);
    initialize(result);
    return result;
  }

  public class UpdateComments extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments> {

    private static final String REST_PATH = "comments";

    /**
     * Create a request for the method "updateComments".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link UpdateComments#execute()} method to invoke the remote
     * operation. <p> {@link UpdateComments#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments}
     * @since 1.13
     */
    protected UpdateComments(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments content) {
      super(Rmsendpoint.this, "PUT", REST_PATH, content, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Comments.class);
    }

    @Override
    public UpdateComments setAlt(java.lang.String alt) {
      return (UpdateComments) super.setAlt(alt);
    }

    @Override
    public UpdateComments setFields(java.lang.String fields) {
      return (UpdateComments) super.setFields(fields);
    }

    @Override
    public UpdateComments setKey(java.lang.String key) {
      return (UpdateComments) super.setKey(key);
    }

    @Override
    public UpdateComments setOauthToken(java.lang.String oauthToken) {
      return (UpdateComments) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateComments setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateComments) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateComments setQuotaUser(java.lang.String quotaUser) {
      return (UpdateComments) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateComments setUserIp(java.lang.String userIp) {
      return (UpdateComments) super.setUserIp(userIp);
    }

    @Override
    public UpdateComments set(String parameterName, Object value) {
      return (UpdateComments) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateSpots".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link UpdateSpots#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots}
   * @return the request
   */
  public UpdateSpots updateSpots(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots content) throws java.io.IOException {
    UpdateSpots result = new UpdateSpots(content);
    initialize(result);
    return result;
  }

  public class UpdateSpots extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots> {

    private static final String REST_PATH = "spots";

    /**
     * Create a request for the method "updateSpots".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link UpdateSpots#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdateSpots#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots}
     * @since 1.13
     */
    protected UpdateSpots(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots content) {
      super(Rmsendpoint.this, "PUT", REST_PATH, content, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Spots.class);
    }

    @Override
    public UpdateSpots setAlt(java.lang.String alt) {
      return (UpdateSpots) super.setAlt(alt);
    }

    @Override
    public UpdateSpots setFields(java.lang.String fields) {
      return (UpdateSpots) super.setFields(fields);
    }

    @Override
    public UpdateSpots setKey(java.lang.String key) {
      return (UpdateSpots) super.setKey(key);
    }

    @Override
    public UpdateSpots setOauthToken(java.lang.String oauthToken) {
      return (UpdateSpots) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateSpots setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateSpots) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateSpots setQuotaUser(java.lang.String quotaUser) {
      return (UpdateSpots) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateSpots setUserIp(java.lang.String userIp) {
      return (UpdateSpots) super.setUserIp(userIp);
    }

    @Override
    public UpdateSpots set(String parameterName, Object value) {
      return (UpdateSpots) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateUsers".
   *
   * This request holds the parameters needed by the the rmsendpoint server.  After setting any
   * optional parameters, call the {@link UpdateUsers#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users}
   * @return the request
   */
  public UpdateUsers updateUsers(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users content) throws java.io.IOException {
    UpdateUsers result = new UpdateUsers(content);
    initialize(result);
    return result;
  }

  public class UpdateUsers extends RmsendpointRequest<com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users> {

    private static final String REST_PATH = "users";

    /**
     * Create a request for the method "updateUsers".
     *
     * This request holds the parameters needed by the the rmsendpoint server.  After setting any
     * optional parameters, call the {@link UpdateUsers#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdateUsers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users}
     * @since 1.13
     */
    protected UpdateUsers(com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users content) {
      super(Rmsendpoint.this, "PUT", REST_PATH, content, com.w3m.api.ridemyspot.entity.rmsendpoint.model.Users.class);
    }

    @Override
    public UpdateUsers setAlt(java.lang.String alt) {
      return (UpdateUsers) super.setAlt(alt);
    }

    @Override
    public UpdateUsers setFields(java.lang.String fields) {
      return (UpdateUsers) super.setFields(fields);
    }

    @Override
    public UpdateUsers setKey(java.lang.String key) {
      return (UpdateUsers) super.setKey(key);
    }

    @Override
    public UpdateUsers setOauthToken(java.lang.String oauthToken) {
      return (UpdateUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateUsers setQuotaUser(java.lang.String quotaUser) {
      return (UpdateUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateUsers setUserIp(java.lang.String userIp) {
      return (UpdateUsers) super.setUserIp(userIp);
    }

    @Override
    public UpdateUsers set(String parameterName, Object value) {
      return (UpdateUsers) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Rmsendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Rmsendpoint}. */
    @Override
    public Rmsendpoint build() {
      return new Rmsendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link RmsendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setRmsendpointRequestInitializer(
        RmsendpointRequestInitializer rmsendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(rmsendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
